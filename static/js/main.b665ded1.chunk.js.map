{"version":3,"sources":["components/Header.js","components/GridSquare.js","game/Ship.js","game/Player.js","game/Gameboard.js","components/Setup.js","components/PostSetup.js","components/GameLoop.js","components/StartModal.js","App.js","index.js"],"names":["Header","className","GridSquare","props","newHoverFunc","newClickFunc","hoverFunc","coord","placeShip","attack","id","onClick","onMouseEnter","placed","hovered","hit","miss","createPlayer","gameboard","grid","i","innerGrid","push","buildGrid","ships","attacks","shipLength","coords","horizontal","ship","length","hits","space","includes","isSunk","createShip","x","y","stringified","JSON","stringify","allCoords","some","statement","oOB","forEach","receiveAttack","array","shipToHit","spaceToHit","meme","index","allSunk","every","populateRandomShips","randomCoords","Math","floor","random","getShortestShip","shortGuy","parseFloat","overlap","stringedArray","map","Set","size","createGameboard","randomAttack","Setup","useState","hoveredCoords","setHoveredCoords","player","setLength","tryToPlaceShip","rotated","sendPlayer","console","log","alert","hoverSquares","numberifiedCoord","parseInt","coordsToHover","newCoord","playerContent","arrIndex","cell","cellIndex","somethingPlacedHere","currCoord","PostSetup","humanPlayer","human","ai","setAI","humanMisses","setHumanMisses","humanHits","setHumanHits","aiMisses","setAIMisses","aiHits","setAIHits","attackHit","aiHit","stringyCoord","prev","attackAlreadyUsed","string","getRandomAttack","getBoardContent","boardContent","useEffect","prevPlayer","Object","assign","setTimeout","window","location","reload","GameLoop","gameState","setRotated","playerToPassDown","setPlayerToPassDown","shipsPlaced","setShipsPlaced","StartModal","gameStarted","setGameFunc","App","gameMode","setGameMode","mode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b665ded1.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n  return (\n    <div className=\"header-container\">\n      <h1 className=\"main-header\">Battleship</h1>\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nexport default function GridSquare(props) {\n  let newHoverFunc\n  let newClickFunc\n  if (props.hoverFunc) {\n    newHoverFunc = ()=>(props.hoverFunc(props.coord))\n  } else {\n    newHoverFunc = ()=>{}\n  }\n\n  if (props.placeShip) {\n    newClickFunc = ()=>{props.placeShip(props.coord)}\n  } else if (props.attack) {\n    newClickFunc = ()=>{props.attack(props.coord)}\n  } else {\n    newClickFunc = ()=>{}\n  }\n\n  return (\n    <div id={props.coord} onClick={newClickFunc} onMouseEnter={newHoverFunc} className={\"square \" + \n              (props.placed ? \"placed \" : \"\") + \n              (props.hovered ? \"hovered \": \"\") +\n              (props.hit ? \"hit \" : \"\") +\n              (props.miss ? \"miss \" : \"\")\n    }>\n      \n    </div>\n  )\n}","const createShip = (length) => {\n  let hits = []\n  let coords = []\n  \n  const hit = (space) => {\n    if (hits.includes(space)) {\n      return false\n    } else if (space > length - 1) {\n      return false\n    } \n    else {\n      hits.push(space)\n    }\n  }\n\n  const isSunk = () => {\n    if(hits.length === length) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  \n\n  return {\n    length: length,\n    hits,\n    hit,\n    isSunk,\n    coords,\n  }\n}\n\nexport { createShip }","import { createGameboard } from \"./Gameboard\";\n\nconst createPlayer = () => {\n  let gameboard = createGameboard()\n\n  const randomAttack = () => {\n    let coord = []\n    coord[0] = Math.floor(Math.random() * 10)\n    coord[1] = Math.floor(Math.random() * 10)\n    return coord\n  }\n\n  return {\n    gameboard,\n    randomAttack\n  }\n}\n\nexport {createPlayer}","import {createShip} from './Ship'\n\nconst createGameboard = () => {\n  let grid = buildGrid()\n  let ships = []\n  let attacks = []\n\n  // returns array of length 10 with items being arrays of length 10\n  function buildGrid() {\n    let grid = []\n    for (let i = 0; i < 10; i++) {\n      let innerGrid = []\n      for (let i = 0; i < 10; i++) {\n        innerGrid.push('')\n      }\n      grid.push(innerGrid)\n    }\n    return grid\n  }\n  \n  const placeShip = (shipLength, coords, horizontal) => {\n    let ship = createShip(shipLength)\n    let x = coords[0]\n    let y = coords[1]\n    let stringified = JSON.stringify(coords)\n\n    if(allCoords().some(coord => JSON.stringify(coord) === stringified)) { return false}\n\n    // if out of bounds, return false\n    const oOB = () => {\n      let statement = false\n      if (coords[0] > 10 || coords[1] > 10) {\n        statement = true\n      } else if (horizontal && (coords[1] + shipLength) > 10) {\n        statement = true\n      } else if (!horizontal && (coords[0] + shipLength) > 10) {\n        statement = true\n      }\n      return statement\n    }\n\n    if (oOB()) {\n      return false\n    }\n\n    if (horizontal) {\n      for (let i = 0; i < ship.length; i++) {\n        ship.coords.push([x, (y + i)])\n        grid[x][y + i] = 'x'\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        ship.coords.push([(x + i), y])\n        grid[x + i][y] = 'x'\n      }\n    }\n    ships.push(ship)\n    return true\n  }\n\n  const receiveAttack = (array) => {\n    \n    // Technique used to emulate attacks.includes(array)\n    let meme = JSON.stringify(array)\n    if(attacks.some(coord => JSON.stringify(coord) === meme)) { return false }\n    \n    let shipToHit\n    let spaceToHit\n    (() => {\n      ships.forEach((ship) => {\n        ship.coords.forEach((coord, index) => {\n          if (coord[0] === array[0] && coord[1] === array[1]) {\n            spaceToHit = index\n            shipToHit = ship\n          }\n        })\n      })\n    })()\n\n    attacks.push(array)\n\n    if (shipToHit) {\n      shipToHit.hit(spaceToHit)\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const allSunk = () => {\n    if (ships.length === 0) {\n      return false\n    }\n\n    if (ships.every(ship => ship.isSunk())) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  const allCoords = () => {\n    let allCoords = []\n    ships.forEach(ship => {\n      ship.coords.forEach(coord => {\n        allCoords.push(coord)\n      })\n    })\n    return allCoords\n  }\n\n  const populateRandomShips = () => {\n    ships = []\n\n    placeShip(5, randomCoords(), (Math.random() < parseFloat(0.5)))\n\n    function randomCoords () {\n      let coord = []\n      coord.push(Math.floor(Math.random() * 10))\n      coord.push(Math.floor(Math.random() * 10))\n      return coord\n    }\n\n    function getShortestShip() {\n      let shortGuy = 6\n      ships.forEach(ship => {\n        if (ship.length < shortGuy) {shortGuy = ship.length}\n      })\n      return shortGuy\n    }\n\n    while (ships.length <= 4) {\n     placeShip((getShortestShip() - 1), randomCoords(), (Math.random() < parseFloat(0.5)))\n    }\n    \n    let overlap = false\n\n    let stringedArray = allCoords().map(JSON.stringify)\n    let newSet = new Set(stringedArray)\n    \n    if (newSet.size < allCoords().length) {\n      overlap = true\n    }\n \n    if (overlap) {\n      populateRandomShips()\n    }\n    \n  }\n\n  return {\n    grid,\n    placeShip,\n    ships,\n    receiveAttack,\n    attacks,\n    allSunk,\n    allCoords,\n    populateRandomShips\n  }\n}\n\nexport {createGameboard}","import React, { useState, useEffect } from 'react'\nimport GridSquare from \"./GridSquare\";\nimport { createPlayer } from \"../game/Player\";\n\nfunction Setup(props) {\n  const [hoveredCoords, setHoveredCoords] = useState([])\n  const [player, setPlayer] = useState(createPlayer())\n  const [length, setLength] = useState(5)\n  \n  function tryToPlaceShip(coord) {\n    if (player.gameboard.placeShip(length, coord, props.rotated)) {\n      setLength(length - 1)\n      props.placeShip()\n      props.sendPlayer(player)\n      console.log('ship true')\n    } else {\n      console.log('ship false')\n      alert(\"You cannot place ships overlapping or out of bounds!\")\n    }\n  }\n\n  function hoverSquares(coord) {\n    let numberifiedCoord = coord.map(meme => parseInt(meme))\n    let coordsToHover = []\n    coordsToHover.push(numberifiedCoord)\n\n    for (let i = 1; i < length; i++) {\n      let newCoord = []\n      if (props.rotated){\n        newCoord.push(numberifiedCoord[0])\n        newCoord.push(numberifiedCoord[1] + i)\n      } else {\n        newCoord.push(numberifiedCoord[0] + i)\n        newCoord.push(numberifiedCoord[1])\n      }\n      coordsToHover.push(newCoord)\n    }\n    setHoveredCoords(coordsToHover)\n  }\n\n  let playerContent = []\n  player.gameboard.grid.forEach((array, arrIndex) => {\n    array.forEach((cell, cellIndex) => {\n      let somethingPlacedHere = false\n      let hovered = false\n      let allCoords = player.gameboard.allCoords()\n      let currCoord = JSON.stringify([arrIndex, cellIndex])\n\n      if(allCoords.some(coord => JSON.stringify(coord) === currCoord)) {somethingPlacedHere = true}\n      if(hoveredCoords.some(coord => JSON.stringify(coord) === currCoord)) {hovered = true}\n\n      playerContent.push(\n        <GridSquare hoverFunc={hoverSquares} hovered={hovered} placed={somethingPlacedHere} coord={[arrIndex, cellIndex]} key={currCoord} placeShip={tryToPlaceShip}/>\n      )\n    })\n  })\n\n  return (\n    <div className=\"square-container\">\n      {playerContent}\n    </div>\n  )\n}\n\nexport default Setup\n","import React, {useState, useEffect} from 'react'\nimport GridSquare from \"./GridSquare\";\nimport { createPlayer } from \"../game/Player\";\n\nfunction PostSetup(props) {\n  const [human, setHuman] = useState(props.humanPlayer)\n  const [ai, setAI] = useState(createPlayer())\n  const [humanMisses, setHumanMisses] = useState([])\n  const [humanHits, setHumanHits] = useState([])\n  const [aiMisses, setAIMisses] = useState([])\n  const [aiHits, setAIHits] = useState([])\n\n  useEffect(() => {\n    setAI(prev => {\n      let prevPlayer = Object.assign({}, prev)\n      prevPlayer.gameboard.populateRandomShips()\n      return prevPlayer\n    })\n  },[])\n\n  if (ai.gameboard.allSunk()) {\n    setTimeout(()=>{\n      alert('You Won!')\n      window.location.reload()\n    },1000)\n  }\n\n  if (human.gameboard.allSunk()) {\n    setTimeout(()=>{\n      alert('You Lost!')\n      window.location.reload()\n    },1000)\n  }\n\n  function attack(coord) {\n    let attackHit = false\n    let aiHit = true\n    let stringyCoord = JSON.stringify(coord)\n    if (humanHits.some(coord => JSON.stringify(coord) === stringyCoord) ||\n        humanMisses.some(coord => JSON.stringify(coord) === stringyCoord)) {\n      alert(\"You have attacked there already!\")\n      return\n    }\n\n    if(ai.gameboard.receiveAttack(coord)) {\n      attackHit = true\n      setHumanHits(prev => {\n        return [...prev, coord]\n      })\n    } else {\n      setHumanMisses(prev => {\n        return [...prev, coord]\n      })\n    }\n\n    if (!attackHit) {\n      console.log(\"ai is attacking\")\n      while(aiHit) {\n        let attack = getRandomAttack()\n        console.log(attack)\n        if(human.gameboard.receiveAttack(attack)) {\n          aiHit = true\n          setAIHits(prev => {\n            return [...prev, attack]\n          })\n        } else {\n          aiHit = false\n          setAIMisses(prev => {\n            return [...prev, attack]\n          })\n        }\n      }\n      console.log(aiHit)\n    }\n  }\n\n  function getRandomAttack() {\n    let attack = ai.randomAttack()\n    function attackAlreadyUsed() {\n      let statement = false\n      let string = JSON.stringify(attack)\n      \n      if (aiMisses.some(coord => JSON.stringify(coord) === string) ||\n          aiHits.some(coord => JSON.stringify(coord) === string)) {\n        statement = true\n      }\n      return statement\n    }\n\n    while (attackAlreadyUsed()) {\n      attack = ai.randomAttack()\n    }\n    return attack\n  }\n\n  function getBoardContent(player, human) {\n    let boardContent = []\n    player.gameboard.grid.forEach((array, arrIndex) => {\n      array.forEach((cell, cellIndex) => {\n        let hit = false\n        let miss = false\n        let placed = false\n        let allCoords = player.gameboard.allCoords()\n        let currCoord = JSON.stringify([arrIndex, cellIndex])\n\n        // ADD && human BACK\n        if(allCoords.some(coord => JSON.stringify(coord) === currCoord) && human) {placed = true}\n\n        if(human) {\n          if(aiMisses.some(coord => JSON.stringify(coord) === currCoord)) {\n            miss = true\n          }\n        } else {\n          if(humanMisses.some(coord => JSON.stringify(coord) === currCoord)) {\n            miss = true\n          }\n        }\n\n        if(human) {\n          if(aiHits.some(coord => JSON.stringify(coord) === currCoord)) {\n            hit = true\n          }\n        } else {\n          if(humanHits.some(coord => JSON.stringify(coord) === currCoord)) {\n            hit = true\n          }\n        }\n\n        boardContent.push(\n          <GridSquare hit={hit} miss={miss} attack={human ? ()=>{} : attack} placed={placed} coord={[arrIndex, cellIndex]} key={currCoord} />\n        )\n      })\n    })\n    return boardContent\n  }\n  return (\n    <div>\n      <div className=\"game-container\">\n        <div>\n          <p className=\"board-text\">Your Board</p>\n          <div className=\"square-container\">\n            {getBoardContent(human, true)}\n          </div>\n        </div>\n\n        <div>\n          <p className=\"board-text\">Enemy Board</p>\n          <div className=\"square-container\">\n            {getBoardContent(ai, false)}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default PostSetup\n","import React, {useState} from 'react'\nimport Setup from './Setup';\nimport PostSetup from \"./PostSetup\";\n\nfunction GameLoop(props) {\n  const [rotated, setRotated] = useState(false)\n  const [playerToPassDown, setPlayerToPassDown] = useState({})\n  const [shipsPlaced, setShipsPlaced] = useState(0)\n\n  function updateShipsPlaced() {\n    setShipsPlaced(prev => {\n      let newNum = prev + 1\n      return newNum\n    })\n  }\n\n  function bringPlayerUp(player) {\n    setPlayerToPassDown(player)\n  }\n\n  function toggleRotated() {\n    setRotated(!rotated)\n  }\n\n  let gameState\n  if (shipsPlaced >= 5) {\n    gameState = <PostSetup humanPlayer={playerToPassDown} />\n  } else {\n    gameState = (\n      <div>\n        <button className={\"rotate \" + (rotated ? \"green\" : \"red\")} onClick={()=>{toggleRotated()}}>{\"Rotate \" + (rotated ? \"✓\" : \"✕\")}</button>\n        <Setup sendPlayer={bringPlayerUp} rotated={rotated} placeShip={updateShipsPlaced} />\n      </div>)\n  }\n\n  return (\n    <div>\n      {gameState}\n    </div>\n  )\n}\n\nexport default GameLoop\n","import React from 'react'\n\nfunction StartModal(props) {\n  return (\n    <div className={props.gameStarted ? \"modal-hidden\" : \"modal\"}>\n      <div className=\"modal-content\">\n        <h1>Welcome to Battleship</h1>\n        <p>Are you ready to do battle?</p>\n        <p>Step 1) Place all 5 of your ships, ranging in length from 5 down to 1</p>\n        <p>Step 2) The Enemy Board will appear and you need to try to shoot their ships</p>\n        <div className=\"buttons\">\n          <button onClick={()=>{props.setGameFunc('ai')}}>Start Game</button>\n          \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StartModal\n","import React, {useState} from 'react'\nimport Header from \"./components/Header\";\nimport GameLoop from \"./components/GameLoop\"\nimport StartModal from './components/StartModal';\n\nfunction App() {\n  const [gameMode, setGameMode] = useState('')\n\n  function startGame(mode) {\n    setGameMode(mode)\n  }\n\n  return(\n    <div className=\"app\">\n      <StartModal setGameFunc={startGame} gameStarted={gameMode === '' ? false : true} />\n      <Header />\n      <GameLoop />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css'\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}